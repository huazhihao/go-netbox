// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApprovalList approval list
//
// swagger:model ApprovalList
type ApprovalList struct {

	// Applicant
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Applicant *string `json:"applicant"`

	// Approver
	// Max Length: 255
	Approver string `json:"approver,omitempty"`

	// Created time
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"created_time,omitempty"`

	// Failed reason
	// Max Length: 255
	FailedReason string `json:"failed_reason,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Raw
	Raw string `json:"raw,omitempty"`

	// Servicename
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Servicename *string `json:"servicename"`

	// Status
	// Enum: [0 1]
	Status int64 `json:"status,omitempty"`

	// Uuid
	// Required: true
	// Max Length: 255
	// Min Length: 1
	UUID *string `json:"uuid"`
}

// Validate validates this approval list
func (m *ApprovalList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApprovalList) validateApplicant(formats strfmt.Registry) error {

	if err := validate.Required("applicant", "body", m.Applicant); err != nil {
		return err
	}

	if err := validate.MinLength("applicant", "body", string(*m.Applicant), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("applicant", "body", string(*m.Applicant), 255); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalList) validateApprover(formats strfmt.Registry) error {

	if swag.IsZero(m.Approver) { // not required
		return nil
	}

	if err := validate.MaxLength("approver", "body", string(m.Approver), 255); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalList) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalList) validateFailedReason(formats strfmt.Registry) error {

	if swag.IsZero(m.FailedReason) { // not required
		return nil
	}

	if err := validate.MaxLength("failed_reason", "body", string(m.FailedReason), 255); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalList) validateServicename(formats strfmt.Registry) error {

	if err := validate.Required("servicename", "body", m.Servicename); err != nil {
		return err
	}

	if err := validate.MinLength("servicename", "body", string(*m.Servicename), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("servicename", "body", string(*m.Servicename), 255); err != nil {
		return err
	}

	return nil
}

var approvalListTypeStatusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		approvalListTypeStatusPropEnum = append(approvalListTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *ApprovalList) validateStatusEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, approvalListTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApprovalList) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalList) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	if err := validate.MinLength("uuid", "body", string(*m.UUID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("uuid", "body", string(*m.UUID), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApprovalList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApprovalList) UnmarshalBinary(b []byte) error {
	var res ApprovalList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
