// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JiraChange jira change
//
// swagger:model JiraChange
type JiraChange struct {

	// Assignee
	// Max Length: 100
	// Min Length: 1
	Assignee string `json:"assignee,omitempty"`

	// EndTime
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Jira link
	// Required: true
	// Max Length: 20
	// Min Length: 1
	JiraLink *string `json:"jira_link"`

	// site
	Site *NestedSite `json:"site,omitempty"`

	// StartTime
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Status
	// Enum: [1 2 3 4 5 6 7 8]
	Status int64 `json:"status,omitempty"`

	// Summary
	// Required: true
	// Max Length: 200
	// Min Length: 1
	Summary *string `json:"summary"`

	// Type
	// Enum: [1 2 3]
	Type int64 `json:"type,omitempty"`
}

// Validate validates this jira change
func (m *JiraChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJiraLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JiraChange) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if err := validate.MinLength("assignee", "body", string(m.Assignee), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("assignee", "body", string(m.Assignee), 100); err != nil {
		return err
	}

	return nil
}

func (m *JiraChange) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JiraChange) validateJiraLink(formats strfmt.Registry) error {

	if err := validate.Required("jira_link", "body", m.JiraLink); err != nil {
		return err
	}

	if err := validate.MinLength("jira_link", "body", string(*m.JiraLink), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("jira_link", "body", string(*m.JiraLink), 20); err != nil {
		return err
	}

	return nil
}

func (m *JiraChange) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *JiraChange) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var jiraChangeTypeStatusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7,8]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jiraChangeTypeStatusPropEnum = append(jiraChangeTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *JiraChange) validateStatusEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, jiraChangeTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JiraChange) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *JiraChange) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	if err := validate.MinLength("summary", "body", string(*m.Summary), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("summary", "body", string(*m.Summary), 200); err != nil {
		return err
	}

	return nil
}

var jiraChangeTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jiraChangeTypeTypePropEnum = append(jiraChangeTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *JiraChange) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, jiraChangeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JiraChange) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JiraChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JiraChange) UnmarshalBinary(b []byte) error {
	var res JiraChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
