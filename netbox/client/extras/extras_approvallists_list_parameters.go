// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package extras

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewExtrasApprovallistsListParams creates a new ExtrasApprovallistsListParams object
// with the default values initialized.
func NewExtrasApprovallistsListParams() *ExtrasApprovallistsListParams {
	var ()
	return &ExtrasApprovallistsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewExtrasApprovallistsListParamsWithTimeout creates a new ExtrasApprovallistsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExtrasApprovallistsListParamsWithTimeout(timeout time.Duration) *ExtrasApprovallistsListParams {
	var ()
	return &ExtrasApprovallistsListParams{

		timeout: timeout,
	}
}

// NewExtrasApprovallistsListParamsWithContext creates a new ExtrasApprovallistsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewExtrasApprovallistsListParamsWithContext(ctx context.Context) *ExtrasApprovallistsListParams {
	var ()
	return &ExtrasApprovallistsListParams{

		Context: ctx,
	}
}

// NewExtrasApprovallistsListParamsWithHTTPClient creates a new ExtrasApprovallistsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExtrasApprovallistsListParamsWithHTTPClient(client *http.Client) *ExtrasApprovallistsListParams {
	var ()
	return &ExtrasApprovallistsListParams{
		HTTPClient: client,
	}
}

/*ExtrasApprovallistsListParams contains all the parameters to send to the API endpoint
for the extras approvallists list operation typically these are written to a http.Request
*/
type ExtrasApprovallistsListParams struct {

	/*Applicant*/
	Applicant *string
	/*Approver*/
	Approver *string
	/*CreatedTime*/
	CreatedTime *string
	/*FailedReason*/
	FailedReason *string
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Q*/
	Q *string
	/*Raw*/
	Raw *string
	/*Servicename*/
	Servicename *string
	/*Status*/
	Status *string
	/*UUID*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithTimeout(timeout time.Duration) *ExtrasApprovallistsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithContext(ctx context.Context) *ExtrasApprovallistsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithHTTPClient(client *http.Client) *ExtrasApprovallistsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicant adds the applicant to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithApplicant(applicant *string) *ExtrasApprovallistsListParams {
	o.SetApplicant(applicant)
	return o
}

// SetApplicant adds the applicant to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetApplicant(applicant *string) {
	o.Applicant = applicant
}

// WithApprover adds the approver to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithApprover(approver *string) *ExtrasApprovallistsListParams {
	o.SetApprover(approver)
	return o
}

// SetApprover adds the approver to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetApprover(approver *string) {
	o.Approver = approver
}

// WithCreatedTime adds the createdTime to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithCreatedTime(createdTime *string) *ExtrasApprovallistsListParams {
	o.SetCreatedTime(createdTime)
	return o
}

// SetCreatedTime adds the createdTime to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetCreatedTime(createdTime *string) {
	o.CreatedTime = createdTime
}

// WithFailedReason adds the failedReason to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithFailedReason(failedReason *string) *ExtrasApprovallistsListParams {
	o.SetFailedReason(failedReason)
	return o
}

// SetFailedReason adds the failedReason to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetFailedReason(failedReason *string) {
	o.FailedReason = failedReason
}

// WithIDIn adds the iDIn to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithIDIn(iDIn *string) *ExtrasApprovallistsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetIDIn(iDIn *string) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithLimit(limit *int64) *ExtrasApprovallistsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithOffset(offset *int64) *ExtrasApprovallistsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithQ(q *string) *ExtrasApprovallistsListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetQ(q *string) {
	o.Q = q
}

// WithRaw adds the raw to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithRaw(raw *string) *ExtrasApprovallistsListParams {
	o.SetRaw(raw)
	return o
}

// SetRaw adds the raw to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetRaw(raw *string) {
	o.Raw = raw
}

// WithServicename adds the servicename to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithServicename(servicename *string) *ExtrasApprovallistsListParams {
	o.SetServicename(servicename)
	return o
}

// SetServicename adds the servicename to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetServicename(servicename *string) {
	o.Servicename = servicename
}

// WithStatus adds the status to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithStatus(status *string) *ExtrasApprovallistsListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetStatus(status *string) {
	o.Status = status
}

// WithUUID adds the uuid to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) WithUUID(uuid *string) *ExtrasApprovallistsListParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the extras approvallists list params
func (o *ExtrasApprovallistsListParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *ExtrasApprovallistsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Applicant != nil {

		// query param applicant
		var qrApplicant string
		if o.Applicant != nil {
			qrApplicant = *o.Applicant
		}
		qApplicant := qrApplicant
		if qApplicant != "" {
			if err := r.SetQueryParam("applicant", qApplicant); err != nil {
				return err
			}
		}

	}

	if o.Approver != nil {

		// query param approver
		var qrApprover string
		if o.Approver != nil {
			qrApprover = *o.Approver
		}
		qApprover := qrApprover
		if qApprover != "" {
			if err := r.SetQueryParam("approver", qApprover); err != nil {
				return err
			}
		}

	}

	if o.CreatedTime != nil {

		// query param created_time
		var qrCreatedTime string
		if o.CreatedTime != nil {
			qrCreatedTime = *o.CreatedTime
		}
		qCreatedTime := qrCreatedTime
		if qCreatedTime != "" {
			if err := r.SetQueryParam("created_time", qCreatedTime); err != nil {
				return err
			}
		}

	}

	if o.FailedReason != nil {

		// query param failed_reason
		var qrFailedReason string
		if o.FailedReason != nil {
			qrFailedReason = *o.FailedReason
		}
		qFailedReason := qrFailedReason
		if qFailedReason != "" {
			if err := r.SetQueryParam("failed_reason", qFailedReason); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn string
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := qrIDIn
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Raw != nil {

		// query param raw
		var qrRaw string
		if o.Raw != nil {
			qrRaw = *o.Raw
		}
		qRaw := qrRaw
		if qRaw != "" {
			if err := r.SetQueryParam("raw", qRaw); err != nil {
				return err
			}
		}

	}

	if o.Servicename != nil {

		// query param servicename
		var qrServicename string
		if o.Servicename != nil {
			qrServicename = *o.Servicename
		}
		qServicename := qrServicename
		if qServicename != "" {
			if err := r.SetQueryParam("servicename", qServicename); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string
		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {
			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
