// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Circuit circuit
//
// swagger:model Circuit
type Circuit struct {

	// Action
	Action string `json:"action,omitempty"`

	// Bandwidth history
	BandwidthHistory string `json:"bandwidth_history,omitempty"`

	// Circuit ID
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Cid *string `json:"cid"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// Commit rate (Mbps)
	// Maximum: 2.147483647e+09
	// Minimum: 0
	CommitRate *int64 `json:"commit_rate,omitempty"`

	// Contract end date
	// Format: date
	ContractEndDate *strfmt.Date `json:"contract_end_date,omitempty"`

	// Contract start date
	// Format: date
	ContractStartDate *strfmt.Date `json:"contract_start_date,omitempty"`

	// Cost center
	// Max Length: 100
	CostCenter *string `json:"cost_center,omitempty"`

	// Created
	// Read Only: true
	// Format: date
	Created strfmt.Date `json:"created,omitempty"`

	// Custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// Customermanager
	Customermanager *int64 `json:"customermanager,omitempty"`

	// Description
	// Max Length: 100
	Description string `json:"description,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Date installed
	// Format: date
	InstallDate *strfmt.Date `json:"install_date,omitempty"`

	// Last updated
	// Read Only: true
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// Librenms hostid
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	LibrenmsHostid *int64 `json:"librenms_hostid,omitempty"`

	// Librenms itemid
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	LibrenmsItemid *int64 `json:"librenms_itemid,omitempty"`

	// Line name
	// Max Length: 50
	LineName *string `json:"line_name,omitempty"`

	// Netflow hostid
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	NetflowHostid *int64 `json:"netflow_hostid,omitempty"`

	// Netflow itemid
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	NetflowItemid *int64 `json:"netflow_itemid,omitempty"`

	// payment circle
	PaymentCircle *CircuitPaymentCircle `json:"payment_circle,omitempty"`

	// provider
	// Required: true
	Provider *NestedProvider `json:"provider"`

	// Qos1 commit rate (Mbps)
	// Maximum: 2.147483647e+09
	// Minimum: 0
	Qos1Bandwidth *int64 `json:"qos1_bandwidth,omitempty"`

	// Qos2 commit rate (Mbps)
	// Maximum: 2.147483647e+09
	// Minimum: 0
	Qos2Bandwidth *int64 `json:"qos2_bandwidth,omitempty"`

	// Qos3 commit rate (Mbps)
	// Maximum: 2.147483647e+09
	// Minimum: 0
	Qos3Bandwidth *int64 `json:"qos3_bandwidth,omitempty"`

	// redundancy type
	RedundancyType *CircuitRedundancyType `json:"redundancy_type,omitempty"`

	// status
	Status *CircuitStatus `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// tenant
	Tenant *NestedTenant `json:"tenant,omitempty"`

	// termination a
	// Required: true
	Terminationa *NestedCircuitTermination `json:"termination_a"`

	// termination z
	// Required: true
	Terminationz *NestedCircuitTermination `json:"termination_z"`

	// type
	// Required: true
	Type *NestedCircuitType `json:"type"`

	// Vendor availabe ips
	// Max Length: 100
	VendorAvailabeIps *string `json:"vendor_availabe_ips,omitempty"`

	// Vendor gw
	// Max Length: 50
	VendorGw *string `json:"vendor_gw,omitempty"`

	// vendor interface type
	VendorInterfaceType *CircuitVendorInterfaceType `json:"vendor_interface_type,omitempty"`
}

// Validate validates this circuit
func (m *Circuit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibrenmsHostid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibrenmsItemid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowHostid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowItemid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentCircle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos1Bandwidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos2Bandwidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos3Bandwidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedundancyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminationa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminationz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorAvailabeIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorGw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorInterfaceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Circuit) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	if err := validate.MinLength("cid", "body", string(*m.Cid), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("cid", "body", string(*m.Cid), 50); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateCommitRate(formats strfmt.Registry) error {

	if swag.IsZero(m.CommitRate) { // not required
		return nil
	}

	if err := validate.MinimumInt("commit_rate", "body", int64(*m.CommitRate), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("commit_rate", "body", int64(*m.CommitRate), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateContractEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ContractEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("contract_end_date", "body", "date", m.ContractEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateContractStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ContractStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("contract_start_date", "body", "date", m.ContractStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateCostCenter(formats strfmt.Registry) error {

	if swag.IsZero(m.CostCenter) { // not required
		return nil
	}

	if err := validate.MaxLength("cost_center", "body", string(*m.CostCenter), 100); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 100); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateInstallDate(formats strfmt.Registry) error {

	if swag.IsZero(m.InstallDate) { // not required
		return nil
	}

	if err := validate.FormatOf("install_date", "body", "date", m.InstallDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateLibrenmsHostid(formats strfmt.Registry) error {

	if swag.IsZero(m.LibrenmsHostid) { // not required
		return nil
	}

	if err := validate.MinimumInt("librenms_hostid", "body", int64(*m.LibrenmsHostid), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("librenms_hostid", "body", int64(*m.LibrenmsHostid), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateLibrenmsItemid(formats strfmt.Registry) error {

	if swag.IsZero(m.LibrenmsItemid) { // not required
		return nil
	}

	if err := validate.MinimumInt("librenms_itemid", "body", int64(*m.LibrenmsItemid), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("librenms_itemid", "body", int64(*m.LibrenmsItemid), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateLineName(formats strfmt.Registry) error {

	if swag.IsZero(m.LineName) { // not required
		return nil
	}

	if err := validate.MaxLength("line_name", "body", string(*m.LineName), 50); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateNetflowHostid(formats strfmt.Registry) error {

	if swag.IsZero(m.NetflowHostid) { // not required
		return nil
	}

	if err := validate.MinimumInt("netflow_hostid", "body", int64(*m.NetflowHostid), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("netflow_hostid", "body", int64(*m.NetflowHostid), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateNetflowItemid(formats strfmt.Registry) error {

	if swag.IsZero(m.NetflowItemid) { // not required
		return nil
	}

	if err := validate.MinimumInt("netflow_itemid", "body", int64(*m.NetflowItemid), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("netflow_itemid", "body", int64(*m.NetflowItemid), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validatePaymentCircle(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentCircle) { // not required
		return nil
	}

	if m.PaymentCircle != nil {
		if err := m.PaymentCircle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_circle")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateQos1Bandwidth(formats strfmt.Registry) error {

	if swag.IsZero(m.Qos1Bandwidth) { // not required
		return nil
	}

	if err := validate.MinimumInt("qos1_bandwidth", "body", int64(*m.Qos1Bandwidth), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("qos1_bandwidth", "body", int64(*m.Qos1Bandwidth), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateQos2Bandwidth(formats strfmt.Registry) error {

	if swag.IsZero(m.Qos2Bandwidth) { // not required
		return nil
	}

	if err := validate.MinimumInt("qos2_bandwidth", "body", int64(*m.Qos2Bandwidth), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("qos2_bandwidth", "body", int64(*m.Qos2Bandwidth), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateQos3Bandwidth(formats strfmt.Registry) error {

	if swag.IsZero(m.Qos3Bandwidth) { // not required
		return nil
	}

	if err := validate.MinimumInt("qos3_bandwidth", "body", int64(*m.Qos3Bandwidth), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("qos3_bandwidth", "body", int64(*m.Qos3Bandwidth), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateRedundancyType(formats strfmt.Registry) error {

	if swag.IsZero(m.RedundancyType) { // not required
		return nil
	}

	if m.RedundancyType != nil {
		if err := m.RedundancyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redundancy_type")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.MinLength("tags"+"."+strconv.Itoa(i), "body", string(m.Tags[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *Circuit) validateTenant(formats strfmt.Registry) error {

	if swag.IsZero(m.Tenant) { // not required
		return nil
	}

	if m.Tenant != nil {
		if err := m.Tenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateTerminationa(formats strfmt.Registry) error {

	if err := validate.Required("termination_a", "body", m.Terminationa); err != nil {
		return err
	}

	if m.Terminationa != nil {
		if err := m.Terminationa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("termination_a")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateTerminationz(formats strfmt.Registry) error {

	if err := validate.Required("termination_z", "body", m.Terminationz); err != nil {
		return err
	}

	if m.Terminationz != nil {
		if err := m.Terminationz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("termination_z")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *Circuit) validateVendorAvailabeIps(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorAvailabeIps) { // not required
		return nil
	}

	if err := validate.MaxLength("vendor_availabe_ips", "body", string(*m.VendorAvailabeIps), 100); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateVendorGw(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorGw) { // not required
		return nil
	}

	if err := validate.MaxLength("vendor_gw", "body", string(*m.VendorGw), 50); err != nil {
		return err
	}

	return nil
}

func (m *Circuit) validateVendorInterfaceType(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorInterfaceType) { // not required
		return nil
	}

	if m.VendorInterfaceType != nil {
		if err := m.VendorInterfaceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vendor_interface_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Circuit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Circuit) UnmarshalBinary(b []byte) error {
	var res Circuit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CircuitPaymentCircle Payment circle
//
// swagger:model CircuitPaymentCircle
type CircuitPaymentCircle struct {

	// label
	// Required: true
	Label *string `json:"label"`

	// value
	// Required: true
	Value *int64 `json:"value"`
}

// Validate validates this circuit payment circle
func (m *CircuitPaymentCircle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CircuitPaymentCircle) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("payment_circle"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *CircuitPaymentCircle) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("payment_circle"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CircuitPaymentCircle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CircuitPaymentCircle) UnmarshalBinary(b []byte) error {
	var res CircuitPaymentCircle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CircuitRedundancyType Redundancy type
//
// swagger:model CircuitRedundancyType
type CircuitRedundancyType struct {

	// label
	// Required: true
	Label *string `json:"label"`

	// value
	// Required: true
	Value *int64 `json:"value"`
}

// Validate validates this circuit redundancy type
func (m *CircuitRedundancyType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CircuitRedundancyType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("redundancy_type"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *CircuitRedundancyType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("redundancy_type"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CircuitRedundancyType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CircuitRedundancyType) UnmarshalBinary(b []byte) error {
	var res CircuitRedundancyType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CircuitStatus Status
//
// swagger:model CircuitStatus
type CircuitStatus struct {

	// label
	// Required: true
	Label *string `json:"label"`

	// value
	// Required: true
	Value *int64 `json:"value"`
}

// Validate validates this circuit status
func (m *CircuitStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CircuitStatus) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("status"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *CircuitStatus) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("status"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CircuitStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CircuitStatus) UnmarshalBinary(b []byte) error {
	var res CircuitStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CircuitVendorInterfaceType Vendor interface type
//
// swagger:model CircuitVendorInterfaceType
type CircuitVendorInterfaceType struct {

	// label
	// Required: true
	Label *string `json:"label"`

	// value
	// Required: true
	Value *int64 `json:"value"`
}

// Validate validates this circuit vendor interface type
func (m *CircuitVendorInterfaceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CircuitVendorInterfaceType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("vendor_interface_type"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *CircuitVendorInterfaceType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("vendor_interface_type"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CircuitVendorInterfaceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CircuitVendorInterfaceType) UnmarshalBinary(b []byte) error {
	var res CircuitVendorInterfaceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
