// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDcimDevicesListParams creates a new DcimDevicesListParams object
// with the default values initialized.
func NewDcimDevicesListParams() *DcimDevicesListParams {
	var ()
	return &DcimDevicesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimDevicesListParamsWithTimeout creates a new DcimDevicesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimDevicesListParamsWithTimeout(timeout time.Duration) *DcimDevicesListParams {
	var ()
	return &DcimDevicesListParams{

		timeout: timeout,
	}
}

// NewDcimDevicesListParamsWithContext creates a new DcimDevicesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimDevicesListParamsWithContext(ctx context.Context) *DcimDevicesListParams {
	var ()
	return &DcimDevicesListParams{

		Context: ctx,
	}
}

// NewDcimDevicesListParamsWithHTTPClient creates a new DcimDevicesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimDevicesListParamsWithHTTPClient(client *http.Client) *DcimDevicesListParams {
	var ()
	return &DcimDevicesListParams{
		HTTPClient: client,
	}
}

/*DcimDevicesListParams contains all the parameters to send to the API endpoint
for the dcim devices list operation typically these are written to a http.Request
*/
type DcimDevicesListParams struct {

	/*EOLDate*/
	EOLDate *string
	/*EOSDate*/
	EOSDate *string
	/*MAEndDate*/
	MAEndDate *string
	/*MAStartDate*/
	MAStartDate *string
	/*AssetTag*/
	AssetTag *string
	/*BackupDate*/
	BackupDate *string
	/*ClusterID*/
	ClusterID *string
	/*ComplianceCheckStatus*/
	ComplianceCheckStatus *string
	/*ConsolePorts*/
	ConsolePorts *string
	/*ConsoleServerPorts*/
	ConsoleServerPorts *string
	/*Department*/
	Department *string
	/*DepartmentID*/
	DepartmentID *string
	/*DeviceTypeID*/
	DeviceTypeID *string
	/*Face*/
	Face *string
	/*HasPrimaryIP*/
	HasPrimaryIP *string
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *string
	/*Interfaces*/
	Interfaces *string
	/*IsFullDepth*/
	IsFullDepth *string
	/*IsVirtualized*/
	IsVirtualized *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*MacAddress*/
	MacAddress *string
	/*Managementip*/
	Managementip *string
	/*Manufacturer*/
	Manufacturer *string
	/*ManufacturerID*/
	ManufacturerID *string
	/*Mavendor*/
	Mavendor *string
	/*MavendorID*/
	MavendorID *string
	/*Model*/
	Model *string
	/*Name*/
	Name *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*OsVersion*/
	OsVersion *string
	/*PassThroughPorts*/
	PassThroughPorts *string
	/*Platform*/
	Platform *string
	/*PlatformID*/
	PlatformID *string
	/*Position*/
	Position *string
	/*PowerOutlets*/
	PowerOutlets *string
	/*PowerPorts*/
	PowerPorts *string
	/*Priority*/
	Priority *string
	/*PurchaseDate*/
	PurchaseDate *string
	/*Q*/
	Q *string
	/*RackGroupID*/
	RackGroupID *string
	/*RackID*/
	RackID *string
	/*Region*/
	Region *string
	/*RegionID*/
	RegionID *string
	/*Role*/
	Role *string
	/*RoleID*/
	RoleID *string
	/*Serial*/
	Serial *string
	/*Site*/
	Site *string
	/*SiteID*/
	SiteID *string
	/*Siteowner*/
	Siteowner *string
	/*SiteownerID*/
	SiteownerID *string
	/*Status*/
	Status *string
	/*Tag*/
	Tag *string
	/*Tenant*/
	Tenant *string
	/*TenantID*/
	TenantID *string
	/*VirtualChassisID*/
	VirtualChassisID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim devices list params
func (o *DcimDevicesListParams) WithTimeout(timeout time.Duration) *DcimDevicesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim devices list params
func (o *DcimDevicesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim devices list params
func (o *DcimDevicesListParams) WithContext(ctx context.Context) *DcimDevicesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim devices list params
func (o *DcimDevicesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim devices list params
func (o *DcimDevicesListParams) WithHTTPClient(client *http.Client) *DcimDevicesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim devices list params
func (o *DcimDevicesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEOLDate adds the eOLDate to the dcim devices list params
func (o *DcimDevicesListParams) WithEOLDate(eOLDate *string) *DcimDevicesListParams {
	o.SetEOLDate(eOLDate)
	return o
}

// SetEOLDate adds the eOLDate to the dcim devices list params
func (o *DcimDevicesListParams) SetEOLDate(eOLDate *string) {
	o.EOLDate = eOLDate
}

// WithEOSDate adds the eOSDate to the dcim devices list params
func (o *DcimDevicesListParams) WithEOSDate(eOSDate *string) *DcimDevicesListParams {
	o.SetEOSDate(eOSDate)
	return o
}

// SetEOSDate adds the eOSDate to the dcim devices list params
func (o *DcimDevicesListParams) SetEOSDate(eOSDate *string) {
	o.EOSDate = eOSDate
}

// WithMAEndDate adds the mAEndDate to the dcim devices list params
func (o *DcimDevicesListParams) WithMAEndDate(mAEndDate *string) *DcimDevicesListParams {
	o.SetMAEndDate(mAEndDate)
	return o
}

// SetMAEndDate adds the mAEndDate to the dcim devices list params
func (o *DcimDevicesListParams) SetMAEndDate(mAEndDate *string) {
	o.MAEndDate = mAEndDate
}

// WithMAStartDate adds the mAStartDate to the dcim devices list params
func (o *DcimDevicesListParams) WithMAStartDate(mAStartDate *string) *DcimDevicesListParams {
	o.SetMAStartDate(mAStartDate)
	return o
}

// SetMAStartDate adds the mAStartDate to the dcim devices list params
func (o *DcimDevicesListParams) SetMAStartDate(mAStartDate *string) {
	o.MAStartDate = mAStartDate
}

// WithAssetTag adds the assetTag to the dcim devices list params
func (o *DcimDevicesListParams) WithAssetTag(assetTag *string) *DcimDevicesListParams {
	o.SetAssetTag(assetTag)
	return o
}

// SetAssetTag adds the assetTag to the dcim devices list params
func (o *DcimDevicesListParams) SetAssetTag(assetTag *string) {
	o.AssetTag = assetTag
}

// WithBackupDate adds the backupDate to the dcim devices list params
func (o *DcimDevicesListParams) WithBackupDate(backupDate *string) *DcimDevicesListParams {
	o.SetBackupDate(backupDate)
	return o
}

// SetBackupDate adds the backupDate to the dcim devices list params
func (o *DcimDevicesListParams) SetBackupDate(backupDate *string) {
	o.BackupDate = backupDate
}

// WithClusterID adds the clusterID to the dcim devices list params
func (o *DcimDevicesListParams) WithClusterID(clusterID *string) *DcimDevicesListParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the dcim devices list params
func (o *DcimDevicesListParams) SetClusterID(clusterID *string) {
	o.ClusterID = clusterID
}

// WithComplianceCheckStatus adds the complianceCheckStatus to the dcim devices list params
func (o *DcimDevicesListParams) WithComplianceCheckStatus(complianceCheckStatus *string) *DcimDevicesListParams {
	o.SetComplianceCheckStatus(complianceCheckStatus)
	return o
}

// SetComplianceCheckStatus adds the complianceCheckStatus to the dcim devices list params
func (o *DcimDevicesListParams) SetComplianceCheckStatus(complianceCheckStatus *string) {
	o.ComplianceCheckStatus = complianceCheckStatus
}

// WithConsolePorts adds the consolePorts to the dcim devices list params
func (o *DcimDevicesListParams) WithConsolePorts(consolePorts *string) *DcimDevicesListParams {
	o.SetConsolePorts(consolePorts)
	return o
}

// SetConsolePorts adds the consolePorts to the dcim devices list params
func (o *DcimDevicesListParams) SetConsolePorts(consolePorts *string) {
	o.ConsolePorts = consolePorts
}

// WithConsoleServerPorts adds the consoleServerPorts to the dcim devices list params
func (o *DcimDevicesListParams) WithConsoleServerPorts(consoleServerPorts *string) *DcimDevicesListParams {
	o.SetConsoleServerPorts(consoleServerPorts)
	return o
}

// SetConsoleServerPorts adds the consoleServerPorts to the dcim devices list params
func (o *DcimDevicesListParams) SetConsoleServerPorts(consoleServerPorts *string) {
	o.ConsoleServerPorts = consoleServerPorts
}

// WithDepartment adds the department to the dcim devices list params
func (o *DcimDevicesListParams) WithDepartment(department *string) *DcimDevicesListParams {
	o.SetDepartment(department)
	return o
}

// SetDepartment adds the department to the dcim devices list params
func (o *DcimDevicesListParams) SetDepartment(department *string) {
	o.Department = department
}

// WithDepartmentID adds the departmentID to the dcim devices list params
func (o *DcimDevicesListParams) WithDepartmentID(departmentID *string) *DcimDevicesListParams {
	o.SetDepartmentID(departmentID)
	return o
}

// SetDepartmentID adds the departmentId to the dcim devices list params
func (o *DcimDevicesListParams) SetDepartmentID(departmentID *string) {
	o.DepartmentID = departmentID
}

// WithDeviceTypeID adds the deviceTypeID to the dcim devices list params
func (o *DcimDevicesListParams) WithDeviceTypeID(deviceTypeID *string) *DcimDevicesListParams {
	o.SetDeviceTypeID(deviceTypeID)
	return o
}

// SetDeviceTypeID adds the deviceTypeId to the dcim devices list params
func (o *DcimDevicesListParams) SetDeviceTypeID(deviceTypeID *string) {
	o.DeviceTypeID = deviceTypeID
}

// WithFace adds the face to the dcim devices list params
func (o *DcimDevicesListParams) WithFace(face *string) *DcimDevicesListParams {
	o.SetFace(face)
	return o
}

// SetFace adds the face to the dcim devices list params
func (o *DcimDevicesListParams) SetFace(face *string) {
	o.Face = face
}

// WithHasPrimaryIP adds the hasPrimaryIP to the dcim devices list params
func (o *DcimDevicesListParams) WithHasPrimaryIP(hasPrimaryIP *string) *DcimDevicesListParams {
	o.SetHasPrimaryIP(hasPrimaryIP)
	return o
}

// SetHasPrimaryIP adds the hasPrimaryIp to the dcim devices list params
func (o *DcimDevicesListParams) SetHasPrimaryIP(hasPrimaryIP *string) {
	o.HasPrimaryIP = hasPrimaryIP
}

// WithIDIn adds the iDIn to the dcim devices list params
func (o *DcimDevicesListParams) WithIDIn(iDIn *string) *DcimDevicesListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the dcim devices list params
func (o *DcimDevicesListParams) SetIDIn(iDIn *string) {
	o.IDIn = iDIn
}

// WithInterfaces adds the interfaces to the dcim devices list params
func (o *DcimDevicesListParams) WithInterfaces(interfaces *string) *DcimDevicesListParams {
	o.SetInterfaces(interfaces)
	return o
}

// SetInterfaces adds the interfaces to the dcim devices list params
func (o *DcimDevicesListParams) SetInterfaces(interfaces *string) {
	o.Interfaces = interfaces
}

// WithIsFullDepth adds the isFullDepth to the dcim devices list params
func (o *DcimDevicesListParams) WithIsFullDepth(isFullDepth *string) *DcimDevicesListParams {
	o.SetIsFullDepth(isFullDepth)
	return o
}

// SetIsFullDepth adds the isFullDepth to the dcim devices list params
func (o *DcimDevicesListParams) SetIsFullDepth(isFullDepth *string) {
	o.IsFullDepth = isFullDepth
}

// WithIsVirtualized adds the isVirtualized to the dcim devices list params
func (o *DcimDevicesListParams) WithIsVirtualized(isVirtualized *string) *DcimDevicesListParams {
	o.SetIsVirtualized(isVirtualized)
	return o
}

// SetIsVirtualized adds the isVirtualized to the dcim devices list params
func (o *DcimDevicesListParams) SetIsVirtualized(isVirtualized *string) {
	o.IsVirtualized = isVirtualized
}

// WithLimit adds the limit to the dcim devices list params
func (o *DcimDevicesListParams) WithLimit(limit *int64) *DcimDevicesListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the dcim devices list params
func (o *DcimDevicesListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMacAddress adds the macAddress to the dcim devices list params
func (o *DcimDevicesListParams) WithMacAddress(macAddress *string) *DcimDevicesListParams {
	o.SetMacAddress(macAddress)
	return o
}

// SetMacAddress adds the macAddress to the dcim devices list params
func (o *DcimDevicesListParams) SetMacAddress(macAddress *string) {
	o.MacAddress = macAddress
}

// WithManagementip adds the managementip to the dcim devices list params
func (o *DcimDevicesListParams) WithManagementip(managementip *string) *DcimDevicesListParams {
	o.SetManagementip(managementip)
	return o
}

// SetManagementip adds the managementip to the dcim devices list params
func (o *DcimDevicesListParams) SetManagementip(managementip *string) {
	o.Managementip = managementip
}

// WithManufacturer adds the manufacturer to the dcim devices list params
func (o *DcimDevicesListParams) WithManufacturer(manufacturer *string) *DcimDevicesListParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the dcim devices list params
func (o *DcimDevicesListParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithManufacturerID adds the manufacturerID to the dcim devices list params
func (o *DcimDevicesListParams) WithManufacturerID(manufacturerID *string) *DcimDevicesListParams {
	o.SetManufacturerID(manufacturerID)
	return o
}

// SetManufacturerID adds the manufacturerId to the dcim devices list params
func (o *DcimDevicesListParams) SetManufacturerID(manufacturerID *string) {
	o.ManufacturerID = manufacturerID
}

// WithMavendor adds the mavendor to the dcim devices list params
func (o *DcimDevicesListParams) WithMavendor(mavendor *string) *DcimDevicesListParams {
	o.SetMavendor(mavendor)
	return o
}

// SetMavendor adds the mavendor to the dcim devices list params
func (o *DcimDevicesListParams) SetMavendor(mavendor *string) {
	o.Mavendor = mavendor
}

// WithMavendorID adds the mavendorID to the dcim devices list params
func (o *DcimDevicesListParams) WithMavendorID(mavendorID *string) *DcimDevicesListParams {
	o.SetMavendorID(mavendorID)
	return o
}

// SetMavendorID adds the mavendorId to the dcim devices list params
func (o *DcimDevicesListParams) SetMavendorID(mavendorID *string) {
	o.MavendorID = mavendorID
}

// WithModel adds the model to the dcim devices list params
func (o *DcimDevicesListParams) WithModel(model *string) *DcimDevicesListParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the dcim devices list params
func (o *DcimDevicesListParams) SetModel(model *string) {
	o.Model = model
}

// WithName adds the name to the dcim devices list params
func (o *DcimDevicesListParams) WithName(name *string) *DcimDevicesListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the dcim devices list params
func (o *DcimDevicesListParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the dcim devices list params
func (o *DcimDevicesListParams) WithOffset(offset *int64) *DcimDevicesListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the dcim devices list params
func (o *DcimDevicesListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOsVersion adds the osVersion to the dcim devices list params
func (o *DcimDevicesListParams) WithOsVersion(osVersion *string) *DcimDevicesListParams {
	o.SetOsVersion(osVersion)
	return o
}

// SetOsVersion adds the osVersion to the dcim devices list params
func (o *DcimDevicesListParams) SetOsVersion(osVersion *string) {
	o.OsVersion = osVersion
}

// WithPassThroughPorts adds the passThroughPorts to the dcim devices list params
func (o *DcimDevicesListParams) WithPassThroughPorts(passThroughPorts *string) *DcimDevicesListParams {
	o.SetPassThroughPorts(passThroughPorts)
	return o
}

// SetPassThroughPorts adds the passThroughPorts to the dcim devices list params
func (o *DcimDevicesListParams) SetPassThroughPorts(passThroughPorts *string) {
	o.PassThroughPorts = passThroughPorts
}

// WithPlatform adds the platform to the dcim devices list params
func (o *DcimDevicesListParams) WithPlatform(platform *string) *DcimDevicesListParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the dcim devices list params
func (o *DcimDevicesListParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithPlatformID adds the platformID to the dcim devices list params
func (o *DcimDevicesListParams) WithPlatformID(platformID *string) *DcimDevicesListParams {
	o.SetPlatformID(platformID)
	return o
}

// SetPlatformID adds the platformId to the dcim devices list params
func (o *DcimDevicesListParams) SetPlatformID(platformID *string) {
	o.PlatformID = platformID
}

// WithPosition adds the position to the dcim devices list params
func (o *DcimDevicesListParams) WithPosition(position *string) *DcimDevicesListParams {
	o.SetPosition(position)
	return o
}

// SetPosition adds the position to the dcim devices list params
func (o *DcimDevicesListParams) SetPosition(position *string) {
	o.Position = position
}

// WithPowerOutlets adds the powerOutlets to the dcim devices list params
func (o *DcimDevicesListParams) WithPowerOutlets(powerOutlets *string) *DcimDevicesListParams {
	o.SetPowerOutlets(powerOutlets)
	return o
}

// SetPowerOutlets adds the powerOutlets to the dcim devices list params
func (o *DcimDevicesListParams) SetPowerOutlets(powerOutlets *string) {
	o.PowerOutlets = powerOutlets
}

// WithPowerPorts adds the powerPorts to the dcim devices list params
func (o *DcimDevicesListParams) WithPowerPorts(powerPorts *string) *DcimDevicesListParams {
	o.SetPowerPorts(powerPorts)
	return o
}

// SetPowerPorts adds the powerPorts to the dcim devices list params
func (o *DcimDevicesListParams) SetPowerPorts(powerPorts *string) {
	o.PowerPorts = powerPorts
}

// WithPriority adds the priority to the dcim devices list params
func (o *DcimDevicesListParams) WithPriority(priority *string) *DcimDevicesListParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the dcim devices list params
func (o *DcimDevicesListParams) SetPriority(priority *string) {
	o.Priority = priority
}

// WithPurchaseDate adds the purchaseDate to the dcim devices list params
func (o *DcimDevicesListParams) WithPurchaseDate(purchaseDate *string) *DcimDevicesListParams {
	o.SetPurchaseDate(purchaseDate)
	return o
}

// SetPurchaseDate adds the purchaseDate to the dcim devices list params
func (o *DcimDevicesListParams) SetPurchaseDate(purchaseDate *string) {
	o.PurchaseDate = purchaseDate
}

// WithQ adds the q to the dcim devices list params
func (o *DcimDevicesListParams) WithQ(q *string) *DcimDevicesListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the dcim devices list params
func (o *DcimDevicesListParams) SetQ(q *string) {
	o.Q = q
}

// WithRackGroupID adds the rackGroupID to the dcim devices list params
func (o *DcimDevicesListParams) WithRackGroupID(rackGroupID *string) *DcimDevicesListParams {
	o.SetRackGroupID(rackGroupID)
	return o
}

// SetRackGroupID adds the rackGroupId to the dcim devices list params
func (o *DcimDevicesListParams) SetRackGroupID(rackGroupID *string) {
	o.RackGroupID = rackGroupID
}

// WithRackID adds the rackID to the dcim devices list params
func (o *DcimDevicesListParams) WithRackID(rackID *string) *DcimDevicesListParams {
	o.SetRackID(rackID)
	return o
}

// SetRackID adds the rackId to the dcim devices list params
func (o *DcimDevicesListParams) SetRackID(rackID *string) {
	o.RackID = rackID
}

// WithRegion adds the region to the dcim devices list params
func (o *DcimDevicesListParams) WithRegion(region *string) *DcimDevicesListParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the dcim devices list params
func (o *DcimDevicesListParams) SetRegion(region *string) {
	o.Region = region
}

// WithRegionID adds the regionID to the dcim devices list params
func (o *DcimDevicesListParams) WithRegionID(regionID *string) *DcimDevicesListParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the dcim devices list params
func (o *DcimDevicesListParams) SetRegionID(regionID *string) {
	o.RegionID = regionID
}

// WithRole adds the role to the dcim devices list params
func (o *DcimDevicesListParams) WithRole(role *string) *DcimDevicesListParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the dcim devices list params
func (o *DcimDevicesListParams) SetRole(role *string) {
	o.Role = role
}

// WithRoleID adds the roleID to the dcim devices list params
func (o *DcimDevicesListParams) WithRoleID(roleID *string) *DcimDevicesListParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the dcim devices list params
func (o *DcimDevicesListParams) SetRoleID(roleID *string) {
	o.RoleID = roleID
}

// WithSerial adds the serial to the dcim devices list params
func (o *DcimDevicesListParams) WithSerial(serial *string) *DcimDevicesListParams {
	o.SetSerial(serial)
	return o
}

// SetSerial adds the serial to the dcim devices list params
func (o *DcimDevicesListParams) SetSerial(serial *string) {
	o.Serial = serial
}

// WithSite adds the site to the dcim devices list params
func (o *DcimDevicesListParams) WithSite(site *string) *DcimDevicesListParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the dcim devices list params
func (o *DcimDevicesListParams) SetSite(site *string) {
	o.Site = site
}

// WithSiteID adds the siteID to the dcim devices list params
func (o *DcimDevicesListParams) WithSiteID(siteID *string) *DcimDevicesListParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the dcim devices list params
func (o *DcimDevicesListParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WithSiteowner adds the siteowner to the dcim devices list params
func (o *DcimDevicesListParams) WithSiteowner(siteowner *string) *DcimDevicesListParams {
	o.SetSiteowner(siteowner)
	return o
}

// SetSiteowner adds the siteowner to the dcim devices list params
func (o *DcimDevicesListParams) SetSiteowner(siteowner *string) {
	o.Siteowner = siteowner
}

// WithSiteownerID adds the siteownerID to the dcim devices list params
func (o *DcimDevicesListParams) WithSiteownerID(siteownerID *string) *DcimDevicesListParams {
	o.SetSiteownerID(siteownerID)
	return o
}

// SetSiteownerID adds the siteownerId to the dcim devices list params
func (o *DcimDevicesListParams) SetSiteownerID(siteownerID *string) {
	o.SiteownerID = siteownerID
}

// WithStatus adds the status to the dcim devices list params
func (o *DcimDevicesListParams) WithStatus(status *string) *DcimDevicesListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the dcim devices list params
func (o *DcimDevicesListParams) SetStatus(status *string) {
	o.Status = status
}

// WithTag adds the tag to the dcim devices list params
func (o *DcimDevicesListParams) WithTag(tag *string) *DcimDevicesListParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the dcim devices list params
func (o *DcimDevicesListParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTenant adds the tenant to the dcim devices list params
func (o *DcimDevicesListParams) WithTenant(tenant *string) *DcimDevicesListParams {
	o.SetTenant(tenant)
	return o
}

// SetTenant adds the tenant to the dcim devices list params
func (o *DcimDevicesListParams) SetTenant(tenant *string) {
	o.Tenant = tenant
}

// WithTenantID adds the tenantID to the dcim devices list params
func (o *DcimDevicesListParams) WithTenantID(tenantID *string) *DcimDevicesListParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the dcim devices list params
func (o *DcimDevicesListParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithVirtualChassisID adds the virtualChassisID to the dcim devices list params
func (o *DcimDevicesListParams) WithVirtualChassisID(virtualChassisID *string) *DcimDevicesListParams {
	o.SetVirtualChassisID(virtualChassisID)
	return o
}

// SetVirtualChassisID adds the virtualChassisId to the dcim devices list params
func (o *DcimDevicesListParams) SetVirtualChassisID(virtualChassisID *string) {
	o.VirtualChassisID = virtualChassisID
}

// WriteToRequest writes these params to a swagger request
func (o *DcimDevicesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EOLDate != nil {

		// query param EOL_date
		var qrEOLDate string
		if o.EOLDate != nil {
			qrEOLDate = *o.EOLDate
		}
		qEOLDate := qrEOLDate
		if qEOLDate != "" {
			if err := r.SetQueryParam("EOL_date", qEOLDate); err != nil {
				return err
			}
		}

	}

	if o.EOSDate != nil {

		// query param EOS_date
		var qrEOSDate string
		if o.EOSDate != nil {
			qrEOSDate = *o.EOSDate
		}
		qEOSDate := qrEOSDate
		if qEOSDate != "" {
			if err := r.SetQueryParam("EOS_date", qEOSDate); err != nil {
				return err
			}
		}

	}

	if o.MAEndDate != nil {

		// query param MA_end_date
		var qrMAEndDate string
		if o.MAEndDate != nil {
			qrMAEndDate = *o.MAEndDate
		}
		qMAEndDate := qrMAEndDate
		if qMAEndDate != "" {
			if err := r.SetQueryParam("MA_end_date", qMAEndDate); err != nil {
				return err
			}
		}

	}

	if o.MAStartDate != nil {

		// query param MA_start_date
		var qrMAStartDate string
		if o.MAStartDate != nil {
			qrMAStartDate = *o.MAStartDate
		}
		qMAStartDate := qrMAStartDate
		if qMAStartDate != "" {
			if err := r.SetQueryParam("MA_start_date", qMAStartDate); err != nil {
				return err
			}
		}

	}

	if o.AssetTag != nil {

		// query param asset_tag
		var qrAssetTag string
		if o.AssetTag != nil {
			qrAssetTag = *o.AssetTag
		}
		qAssetTag := qrAssetTag
		if qAssetTag != "" {
			if err := r.SetQueryParam("asset_tag", qAssetTag); err != nil {
				return err
			}
		}

	}

	if o.BackupDate != nil {

		// query param backup_date
		var qrBackupDate string
		if o.BackupDate != nil {
			qrBackupDate = *o.BackupDate
		}
		qBackupDate := qrBackupDate
		if qBackupDate != "" {
			if err := r.SetQueryParam("backup_date", qBackupDate); err != nil {
				return err
			}
		}

	}

	if o.ClusterID != nil {

		// query param cluster_id
		var qrClusterID string
		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := qrClusterID
		if qClusterID != "" {
			if err := r.SetQueryParam("cluster_id", qClusterID); err != nil {
				return err
			}
		}

	}

	if o.ComplianceCheckStatus != nil {

		// query param compliance_check_status
		var qrComplianceCheckStatus string
		if o.ComplianceCheckStatus != nil {
			qrComplianceCheckStatus = *o.ComplianceCheckStatus
		}
		qComplianceCheckStatus := qrComplianceCheckStatus
		if qComplianceCheckStatus != "" {
			if err := r.SetQueryParam("compliance_check_status", qComplianceCheckStatus); err != nil {
				return err
			}
		}

	}

	if o.ConsolePorts != nil {

		// query param console_ports
		var qrConsolePorts string
		if o.ConsolePorts != nil {
			qrConsolePorts = *o.ConsolePorts
		}
		qConsolePorts := qrConsolePorts
		if qConsolePorts != "" {
			if err := r.SetQueryParam("console_ports", qConsolePorts); err != nil {
				return err
			}
		}

	}

	if o.ConsoleServerPorts != nil {

		// query param console_server_ports
		var qrConsoleServerPorts string
		if o.ConsoleServerPorts != nil {
			qrConsoleServerPorts = *o.ConsoleServerPorts
		}
		qConsoleServerPorts := qrConsoleServerPorts
		if qConsoleServerPorts != "" {
			if err := r.SetQueryParam("console_server_ports", qConsoleServerPorts); err != nil {
				return err
			}
		}

	}

	if o.Department != nil {

		// query param department
		var qrDepartment string
		if o.Department != nil {
			qrDepartment = *o.Department
		}
		qDepartment := qrDepartment
		if qDepartment != "" {
			if err := r.SetQueryParam("department", qDepartment); err != nil {
				return err
			}
		}

	}

	if o.DepartmentID != nil {

		// query param department_id
		var qrDepartmentID string
		if o.DepartmentID != nil {
			qrDepartmentID = *o.DepartmentID
		}
		qDepartmentID := qrDepartmentID
		if qDepartmentID != "" {
			if err := r.SetQueryParam("department_id", qDepartmentID); err != nil {
				return err
			}
		}

	}

	if o.DeviceTypeID != nil {

		// query param device_type_id
		var qrDeviceTypeID string
		if o.DeviceTypeID != nil {
			qrDeviceTypeID = *o.DeviceTypeID
		}
		qDeviceTypeID := qrDeviceTypeID
		if qDeviceTypeID != "" {
			if err := r.SetQueryParam("device_type_id", qDeviceTypeID); err != nil {
				return err
			}
		}

	}

	if o.Face != nil {

		// query param face
		var qrFace string
		if o.Face != nil {
			qrFace = *o.Face
		}
		qFace := qrFace
		if qFace != "" {
			if err := r.SetQueryParam("face", qFace); err != nil {
				return err
			}
		}

	}

	if o.HasPrimaryIP != nil {

		// query param has_primary_ip
		var qrHasPrimaryIP string
		if o.HasPrimaryIP != nil {
			qrHasPrimaryIP = *o.HasPrimaryIP
		}
		qHasPrimaryIP := qrHasPrimaryIP
		if qHasPrimaryIP != "" {
			if err := r.SetQueryParam("has_primary_ip", qHasPrimaryIP); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn string
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := qrIDIn
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Interfaces != nil {

		// query param interfaces
		var qrInterfaces string
		if o.Interfaces != nil {
			qrInterfaces = *o.Interfaces
		}
		qInterfaces := qrInterfaces
		if qInterfaces != "" {
			if err := r.SetQueryParam("interfaces", qInterfaces); err != nil {
				return err
			}
		}

	}

	if o.IsFullDepth != nil {

		// query param is_full_depth
		var qrIsFullDepth string
		if o.IsFullDepth != nil {
			qrIsFullDepth = *o.IsFullDepth
		}
		qIsFullDepth := qrIsFullDepth
		if qIsFullDepth != "" {
			if err := r.SetQueryParam("is_full_depth", qIsFullDepth); err != nil {
				return err
			}
		}

	}

	if o.IsVirtualized != nil {

		// query param is_virtualized
		var qrIsVirtualized string
		if o.IsVirtualized != nil {
			qrIsVirtualized = *o.IsVirtualized
		}
		qIsVirtualized := qrIsVirtualized
		if qIsVirtualized != "" {
			if err := r.SetQueryParam("is_virtualized", qIsVirtualized); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MacAddress != nil {

		// query param mac_address
		var qrMacAddress string
		if o.MacAddress != nil {
			qrMacAddress = *o.MacAddress
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {
			if err := r.SetQueryParam("mac_address", qMacAddress); err != nil {
				return err
			}
		}

	}

	if o.Managementip != nil {

		// query param managementip
		var qrManagementip string
		if o.Managementip != nil {
			qrManagementip = *o.Managementip
		}
		qManagementip := qrManagementip
		if qManagementip != "" {
			if err := r.SetQueryParam("managementip", qManagementip); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// query param manufacturer
		var qrManufacturer string
		if o.Manufacturer != nil {
			qrManufacturer = *o.Manufacturer
		}
		qManufacturer := qrManufacturer
		if qManufacturer != "" {
			if err := r.SetQueryParam("manufacturer", qManufacturer); err != nil {
				return err
			}
		}

	}

	if o.ManufacturerID != nil {

		// query param manufacturer_id
		var qrManufacturerID string
		if o.ManufacturerID != nil {
			qrManufacturerID = *o.ManufacturerID
		}
		qManufacturerID := qrManufacturerID
		if qManufacturerID != "" {
			if err := r.SetQueryParam("manufacturer_id", qManufacturerID); err != nil {
				return err
			}
		}

	}

	if o.Mavendor != nil {

		// query param mavendor
		var qrMavendor string
		if o.Mavendor != nil {
			qrMavendor = *o.Mavendor
		}
		qMavendor := qrMavendor
		if qMavendor != "" {
			if err := r.SetQueryParam("mavendor", qMavendor); err != nil {
				return err
			}
		}

	}

	if o.MavendorID != nil {

		// query param mavendor_id
		var qrMavendorID string
		if o.MavendorID != nil {
			qrMavendorID = *o.MavendorID
		}
		qMavendorID := qrMavendorID
		if qMavendorID != "" {
			if err := r.SetQueryParam("mavendor_id", qMavendorID); err != nil {
				return err
			}
		}

	}

	if o.Model != nil {

		// query param model
		var qrModel string
		if o.Model != nil {
			qrModel = *o.Model
		}
		qModel := qrModel
		if qModel != "" {
			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OsVersion != nil {

		// query param os_version
		var qrOsVersion string
		if o.OsVersion != nil {
			qrOsVersion = *o.OsVersion
		}
		qOsVersion := qrOsVersion
		if qOsVersion != "" {
			if err := r.SetQueryParam("os_version", qOsVersion); err != nil {
				return err
			}
		}

	}

	if o.PassThroughPorts != nil {

		// query param pass_through_ports
		var qrPassThroughPorts string
		if o.PassThroughPorts != nil {
			qrPassThroughPorts = *o.PassThroughPorts
		}
		qPassThroughPorts := qrPassThroughPorts
		if qPassThroughPorts != "" {
			if err := r.SetQueryParam("pass_through_ports", qPassThroughPorts); err != nil {
				return err
			}
		}

	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string
		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {
			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}

	}

	if o.PlatformID != nil {

		// query param platform_id
		var qrPlatformID string
		if o.PlatformID != nil {
			qrPlatformID = *o.PlatformID
		}
		qPlatformID := qrPlatformID
		if qPlatformID != "" {
			if err := r.SetQueryParam("platform_id", qPlatformID); err != nil {
				return err
			}
		}

	}

	if o.Position != nil {

		// query param position
		var qrPosition string
		if o.Position != nil {
			qrPosition = *o.Position
		}
		qPosition := qrPosition
		if qPosition != "" {
			if err := r.SetQueryParam("position", qPosition); err != nil {
				return err
			}
		}

	}

	if o.PowerOutlets != nil {

		// query param power_outlets
		var qrPowerOutlets string
		if o.PowerOutlets != nil {
			qrPowerOutlets = *o.PowerOutlets
		}
		qPowerOutlets := qrPowerOutlets
		if qPowerOutlets != "" {
			if err := r.SetQueryParam("power_outlets", qPowerOutlets); err != nil {
				return err
			}
		}

	}

	if o.PowerPorts != nil {

		// query param power_ports
		var qrPowerPorts string
		if o.PowerPorts != nil {
			qrPowerPorts = *o.PowerPorts
		}
		qPowerPorts := qrPowerPorts
		if qPowerPorts != "" {
			if err := r.SetQueryParam("power_ports", qPowerPorts); err != nil {
				return err
			}
		}

	}

	if o.Priority != nil {

		// query param priority
		var qrPriority string
		if o.Priority != nil {
			qrPriority = *o.Priority
		}
		qPriority := qrPriority
		if qPriority != "" {
			if err := r.SetQueryParam("priority", qPriority); err != nil {
				return err
			}
		}

	}

	if o.PurchaseDate != nil {

		// query param purchase_date
		var qrPurchaseDate string
		if o.PurchaseDate != nil {
			qrPurchaseDate = *o.PurchaseDate
		}
		qPurchaseDate := qrPurchaseDate
		if qPurchaseDate != "" {
			if err := r.SetQueryParam("purchase_date", qPurchaseDate); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.RackGroupID != nil {

		// query param rack_group_id
		var qrRackGroupID string
		if o.RackGroupID != nil {
			qrRackGroupID = *o.RackGroupID
		}
		qRackGroupID := qrRackGroupID
		if qRackGroupID != "" {
			if err := r.SetQueryParam("rack_group_id", qRackGroupID); err != nil {
				return err
			}
		}

	}

	if o.RackID != nil {

		// query param rack_id
		var qrRackID string
		if o.RackID != nil {
			qrRackID = *o.RackID
		}
		qRackID := qrRackID
		if qRackID != "" {
			if err := r.SetQueryParam("rack_id", qRackID); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.RegionID != nil {

		// query param region_id
		var qrRegionID string
		if o.RegionID != nil {
			qrRegionID = *o.RegionID
		}
		qRegionID := qrRegionID
		if qRegionID != "" {
			if err := r.SetQueryParam("region_id", qRegionID); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if o.RoleID != nil {

		// query param role_id
		var qrRoleID string
		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := qrRoleID
		if qRoleID != "" {
			if err := r.SetQueryParam("role_id", qRoleID); err != nil {
				return err
			}
		}

	}

	if o.Serial != nil {

		// query param serial
		var qrSerial string
		if o.Serial != nil {
			qrSerial = *o.Serial
		}
		qSerial := qrSerial
		if qSerial != "" {
			if err := r.SetQueryParam("serial", qSerial); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if o.Siteowner != nil {

		// query param siteowner
		var qrSiteowner string
		if o.Siteowner != nil {
			qrSiteowner = *o.Siteowner
		}
		qSiteowner := qrSiteowner
		if qSiteowner != "" {
			if err := r.SetQueryParam("siteowner", qSiteowner); err != nil {
				return err
			}
		}

	}

	if o.SiteownerID != nil {

		// query param siteowner_id
		var qrSiteownerID string
		if o.SiteownerID != nil {
			qrSiteownerID = *o.SiteownerID
		}
		qSiteownerID := qrSiteownerID
		if qSiteownerID != "" {
			if err := r.SetQueryParam("siteowner_id", qSiteownerID); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if o.Tenant != nil {

		// query param tenant
		var qrTenant string
		if o.Tenant != nil {
			qrTenant = *o.Tenant
		}
		qTenant := qrTenant
		if qTenant != "" {
			if err := r.SetQueryParam("tenant", qTenant); err != nil {
				return err
			}
		}

	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID string
		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {
			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}

	}

	if o.VirtualChassisID != nil {

		// query param virtual_chassis_id
		var qrVirtualChassisID string
		if o.VirtualChassisID != nil {
			qrVirtualChassisID = *o.VirtualChassisID
		}
		qVirtualChassisID := qrVirtualChassisID
		if qVirtualChassisID != "" {
			if err := r.SetQueryParam("virtual_chassis_id", qVirtualChassisID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
